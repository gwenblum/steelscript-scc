# Copyright (c) 2015 Riverbed Technology, Inc.
#
# This software is licensed under the terms and conditions of the MIT License
# accompanying the software ("License").  This software is distributed "AS IS"
# as set forth in the License.

import logging

from steelscript.netprofiler.core.filters import TimeFilter
from steelscript.common.timeutils import datetime_to_seconds


__all__ = ['BWUsageStatsReport',
           'BWTimeSeriesStatsReport',
           'BWPerApplStatsReport',
           'ThroughputStatsReport',
           'ThroughputPerApplStatsReport',
           'ConnectionHistoryStatsReport',
           'ConnectionPoolingStatsReport',
           'ConnectionForwardingStatsReport',
           'HTTPStatsReport',
           'NFSStatsReport',
           'SSLStatsReport',
           'DiskLoadStatsReport',
           'DNSUsageStatsReport',
           'DNSCacheHitsStatsReport',
           'SDRAdaptiveStatsReport',
           'MemoryPagingStatsReport',
           'CpuUtilizationStatsReport',
           'PFSStatsReport',
           'SRDFStatsReport',
           'TCPMemoryPressureReport',
           'QoSStatsReport',
           'SnapMirrorStatsReport',
           'GraniteLUNIOReport',
           'GraniteInitiatorIOReport',
           'GraniteNetworkIOReport',
           'GraniteBlockstoreReport']

logger = logging.getLogger(__name__)


class SCCException(Exception):
    pass


class Report(object):
    """Base class for SCC reports"""
    def __init__(self, scc):
        self.scc = scc

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if any([type, value, traceback]):
            logger.exception("Exception in running %s" % self.__class__)


class StatsReport(Report):
    """Class for reports generated by scc.stats api

    :param required_fields: list of fields required by the sub-report,
        excluding start_time and end_time.
    :param non_required_fields: list of fields available to use but not
        required by the sub-report
    :param resource: string, name of the resource
    """

    required_fields = []
    non_required_fields = []
    resource = None

    def __init__(self, scc):
        super(StatsReport, self).__init__(scc)
        self.criteria = {}

    def fill_criteria(self, **kwargs):

        if 'timefilter' not in kwargs or kwargs['timefilter'] is None:
            timefilter = TimeFilter.parse_range("last 1 hour")
        else:
            timefilter = TimeFilter.parse_range(kwargs['timefilter'])

        start = datetime_to_seconds(timefilter.start)
        end = datetime_to_seconds(timefilter.end)
        self.criteria['start_time'] = int(start)
        self.criteria['end_time'] = int(end)

        if 'devices' in kwargs and kwargs['devices']:
            kwargs['devices'] = kwargs['devices'].split(',')

        if 'port' in kwargs and kwargs['port']:
            kwargs['port'] = int(kwargs['port'])

        # Adding required fields to criteria
        for field in self.required_fields:
            if field not in kwargs:
                raise SCCException('Field %s is required to run %s' %
                                   (field, self.__class__))
            self.criteria[field] = kwargs[field]

        # Adding non-required fields to criteria
        for field in self.non_required_fields:
            if field in kwargs and kwargs[field]:
                self.criteria[field] = kwargs[field]

    def run(self, **kwargs):
        self.fill_criteria(**kwargs)
        data_rep = self.scc.bind(self.resource)
        resp = data_rep.execute('report', self.criteria)
        self.data = resp.data['response_data']


class BWStatsReport(StatsReport):
    """Base class for reports that use bw_criteria as query params"""
    non_required_fields = ['traffic_type', 'port', 'devices']

    def run(self, traffic_type=None, timefilter=None, port=None,
            devices=None):
        super(BWStatsReport, self).run(timefilter=timefilter,
                                       traffic_type=traffic_type,
                                       port=port,
                                       devices=devices)


class BWUsageStatsReport(BWStatsReport):
    resource = 'bw_usage'


class BWTimeSeriesStatsReport(BWStatsReport):
    resource = 'bw_timeseries'


class BWPerApplStatsReport(StatsReport):
    required_fields = ['devices']
    non_required_fields = ['traffic_type']
    resource = 'bw_per_appliance'

    def run(self, timefilter=None, devices=None, traffic_type=None):
        super(BWPerApplStatsReport, self).run(timefilter=timefilter,
                                              devices=devices,
                                              traffic_type=traffic_type)


class ThroughputStatsReport(StatsReport):
    required_fields = ['device']
    non_required_fields = ['traffic_type', 'port']
    resource = 'throughput'

    def run(self, device=None, timefilter=None,  traffic_type=None, port=None):
        super(ThroughputStatsReport, self).run(device=device,
                                               timefilter=timefilter,
                                               traffic_type=traffic_type,
                                               port=port)


class ThroughputPerApplStatsReport(StatsReport):
    required_fields = ['devices']
    non_required_fields = ['traffic_type']
    resource = 'throughput_per_appliance'

    def run(self, devices=None, timefilter=None,  traffic_type=None):
        super(ThroughputPerApplStatsReport, self).run(
            devices=devices, timefilter=timefilter, traffic_type=traffic_type)


class RegPeakTrafficStatsReport(StatsReport):
    required_fields = ['device']
    non_required_fields = ['traffic_type']

    def run(self, timefilter=None, device=None, traffic_type=None):
        super(RegPeakTrafficStatsReport, self).run(timefilter=timefilter,
                                                   device=device,
                                                   traffic_type=traffic_type)


class ConnectionHistoryStatsReport(RegPeakTrafficStatsReport):
    resource = 'connection_history'


class MultiDevStatsReport(StatsReport):
    """Base class for reports that use multiple_devices_criteria as query
    params.
    """
    non_required_fields = ['devices']

    def run(self, timefilter=None, devices=None):
        super(MultiDevStatsReport, self).run(timefilter=timefilter,
                                             devices=devices)


class ConnectionPoolingStatsReport(MultiDevStatsReport):
    resource = 'connection_pooling'


class ConnectionForwardingStatsReport(MultiDevStatsReport):
    resource = 'connection_forwarding'


class DNSUsageStatsReport(MultiDevStatsReport):
    resource = 'dns_usage'


class DNSCacheHitsStatsReport(MultiDevStatsReport):
    resource = 'dns_cache_hits'


class HTTPStatsReport(MultiDevStatsReport):
    resource = 'http'


class NFSStatsReport(MultiDevStatsReport):
    resource = 'nfs'


class SSLStatsReport(MultiDevStatsReport):
    resource = 'ssl'


class DiskLoadStatsReport(MultiDevStatsReport):
    resource = 'disk_load'


class SingleDevStatsReport(StatsReport):
    """Base class for reports that use multiple_devices_criteria as query
    params.
    """
    required_fields = ['device']

    def run(self, timefilter=None, device=None):
        super(SingleDevStatsReport, self).run(timefilter=timefilter,
                                              device=device)


class SDRAdaptiveStatsReport(SingleDevStatsReport):
    resource = 'sdr_adaptive'


class MemoryPagingStatsReport(SingleDevStatsReport):
    resource = 'memory_paging'


class CpuUtilizationStatsReport(SingleDevStatsReport):
    resource = 'cpu_utilization'


class PFSStatsReport(SingleDevStatsReport):
    resource = 'pfs'


class SRDFStatsReport(RegPeakTrafficStatsReport):
    resource = 'srdf'


class TCPMemoryPressureReport(RegPeakTrafficStatsReport):
    resource = 'tcp_memory_pressure'


class QoSStatsReport(StatsReport):
    required_fields = ['device']
    non_required_fields = ['qos_class_id', 'traffic_type']
    resource = 'qos'

    def run(self, timefilter=None, device=None,
            qos_class_id=None, traffic_type=None):
        super(QoSStatsReport, self).run(timefilter=timefilter,
                                        device=device,
                                        qos_class_id=qos_class_id,
                                        traffic_type=traffic_type)


class SnapMirrorStatsReport(StatsReport):
    required_fields = ['device']
    non_required_fields = ['filer_id', 'traffic_type']
    resource = 'snapmirror'

    def run(self, timefilter=None, device=None,
            filer_id=None, traffic_type=None):
        super(SnapMirrorStatsReport, self).run(timefilter=timefilter,
                                               device=device,
                                               filer_id=filer_id,
                                               traffic_type=traffic_type)


class GraniteLUNIOReport(StatsReport):
    required_fields = ['device']
    non_required_fields = ['traffic_type', 'lun_subclass_id']
    resource = 'granite_lun_io'

    def run(self, timefilter=None, device=None,
            lun_subclass_id=None, traffic_type=None):
        super(GraniteLUNIOReport, self).run(timefilter=timefilter,
                                            device=device,
                                            lun_subclass_id=lun_subclass_id,
                                            traffic_type=traffic_type)


class GraniteInitiatorIOReport(StatsReport):
    required_fields = ['device']
    non_required_fields = ['traffic_type', 'initiator_subclass_id']
    resource = 'granite_initiator_io'

    def run(self, timefilter=None, device=None,
            initiator_subclass_id=None, traffic_type=None):
        super(GraniteInitiatorIOReport, self).run(
            timefilter=timefilter, device=device,
            initiator_subclass_id=initiator_subclass_id,
            traffic_type=traffic_type)


class GraniteNetworkIOReport(RegPeakTrafficStatsReport):
    resource = 'granite_network_io'


class GraniteBlockstoreReport(GraniteLUNIOReport):
    resource = 'granite_blockstore'
