# Copyright (c) 2015 Riverbed Technology, Inc.
#
# This software is licensed under the terms and conditions of the MIT License
# accompanying the software ("License").  This software is distributed "AS IS"
# as set forth in the License.

import logging

from steelscript.netprofiler.core.filters import TimeFilter
from steelscript.common.timeutils import datetime_to_seconds


__all__ = ['BWUsageStatsReport',
           'BWTimeSeriesStatsReport',
           'BWPerApplStatsReport',
           'ThroughputStatsReport',
           'ThroughputPerApplStatsReport',
           'ConnectionHistoryStatsReport',
           'ConnectionPoolingStatsReport',
           'ConnectionForwardingStatsReport',
           'HTTPStatsReport',
           'NFSStatsReport',
           'SSLStatsReport',
           'DiskLoadStatsReport',
           'DNSUsageStatsReport',
           'DNSCacheHitsStatsReport',
           'SDRAdaptiveStatsReport',
           'MemoryPagingStatsReport',
           'CpuUtilizationStatsReport',
           'PFSStatsReport',
           'SRDFStatsReport',
           'TCPMemoryPressureReport',
           'QoSStatsReport',
           'SnapMirrorStatsReport',
           'SteelFusionLUNIOReport',
           'SteelFusionInitiatorIOReport',
           'SteelFusionNetworkIOReport',
           'SteelFusionBlockstoreReport']

logger = logging.getLogger(__name__)


class SCCException(Exception):
    pass


class Report(object):
    """Base class for SCC reports"""
    def __init__(self, scc):
        self.scc = scc

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if any([type, value, traceback]):
            logger.exception("Exception in running %s" %
                             self.__class__.__name__)


class BaseStatsReport(Report):
    """Base class for reports generated by scc.stats api, can not be directly
    used for creating reports objects. All report instances are derived based
    on sub-classes inheriting from this class.

    :param required_fields: list of fields required by the sub-report,
        excluding start_time and end_time.
    :param non_required_fields: list of fields available to use but not
        required by the sub-report
    :param resource: string, name of the resource
    """

    required_fields = []
    non_required_fields = []
    resource = None

    def __init__(self, scc):
        super(BaseStatsReport, self).__init__(scc)
        self.criteria = {}

    def fill_criteria(self, **kwargs):

        # Ensure all passed-in params are valid params
        valid_fields = (['timefilter'] + self.required_fields +
                        self.non_required_fields)

        for field in kwargs:
            if field not in valid_fields:
                raise SCCException("Criteria '%s' is not a valid field for %s"
                                   % (field, self.__class__.__name__))

        if 'timefilter' not in kwargs or kwargs['timefilter'] is None:
            timefilter = TimeFilter.parse_range("last 1 hour")
        else:
            timefilter = TimeFilter.parse_range(kwargs['timefilter'])

        start = datetime_to_seconds(timefilter.start)
        end = datetime_to_seconds(timefilter.end)
        self.criteria['start_time'] = int(start)
        self.criteria['end_time'] = int(end)

        if 'devices' in kwargs and kwargs['devices']:
            kwargs['devices'] = kwargs['devices'].split(',')

        if 'port' in kwargs and kwargs['port']:
            kwargs['port'] = int(kwargs['port'])

        # Adding required fields to criteria
        for field in self.required_fields:
            if field not in kwargs:
                raise SCCException('Field %s is required to run %s' %
                                   (field, self.__class__.__name__))
            self.criteria[field] = kwargs[field]

        # Adding non-required fields to criteria
        for field in self.non_required_fields:
            if field in kwargs and kwargs[field]:
                self.criteria[field] = kwargs[field]

    def run(self, **kwargs):
        self.fill_criteria(**kwargs)
        self.data = self.scc.request('cmc.stats', self.resource,
                                     'report', self.criteria)

#
# Bandwidth Reports
#


class BWStatsReport(BaseStatsReport):
    non_required_fields = ['traffic_type', 'port', 'devices']


class BWUsageStatsReport(BWStatsReport):
    """Report class to return bandwidth usage"""
    resource = 'bw_usage'


class BWTimeSeriesStatsReport(BWStatsReport):
    """Report class to return bandwidth timeseries"""
    resource = 'bw_timeseries'


class BWPerApplStatsReport(BaseStatsReport):
    """Report class to return the bandwidth per appliance data"""
    required_fields = ['devices']
    non_required_fields = ['traffic_type']
    resource = 'bw_per_appliance'

#
# Throughput Reports
#


class ThroughputStatsReport(BaseStatsReport):
    """Report class to return the peak/p95 throughput timeseries"""
    required_fields = ['device']
    non_required_fields = ['traffic_type', 'port']
    resource = 'throughput'


class ThroughputPerApplStatsReport(BaseStatsReport):
    """Report class to return the throughput per appliance data"""
    required_fields = ['devices']
    non_required_fields = ['traffic_type']
    resource = 'throughput_per_appliance'

#
# Timeseries Reports for Single Device
#


class TimeseriesStatsReport(BaseStatsReport):
    required_fields = ['device']
    non_required_fields = ['traffic_type']


class ConnectionHistoryStatsReport(TimeseriesStatsReport):
    """Report class to return the max/avg connection history timeseries"""
    resource = 'connection_history'


class SRDFStatsReport(TimeseriesStatsReport):
    """Report class to return the regular/peak srdf timeseries"""
    resource = 'srdf'


class TCPMemoryPressureReport(TimeseriesStatsReport):
    """Report class to return regular/peak tcp memory pressure timesries"""
    resource = 'tcp_memory_pressure'

#
# Multiple Devices Reports
#


class MultiDevStatsReport(BaseStatsReport):
    non_required_fields = ['devices']


class ConnectionPoolingStatsReport(MultiDevStatsReport):
    """Report class to return the connection pooling timeseries"""
    resource = 'connection_pooling'


class ConnectionForwardingStatsReport(MultiDevStatsReport):
    """Report class to return the connection forwrding timeseries"""
    resource = 'connection_forwarding'


class DNSUsageStatsReport(MultiDevStatsReport):
    """Report class to return the dns usage timeseries"""
    resource = 'dns_usage'


class DNSCacheHitsStatsReport(MultiDevStatsReport):
    """Report class to return the dns cache hits timeseries"""
    resource = 'dns_cache_hits'


class HTTPStatsReport(MultiDevStatsReport):
    """Report class to return the http timeseries"""
    resource = 'http'


class NFSStatsReport(MultiDevStatsReport):
    """Report class to return the nfs timeseries"""
    resource = 'nfs'


class SSLStatsReport(MultiDevStatsReport):
    """Report class to return the ssl timeseries"""
    resource = 'ssl'


class DiskLoadStatsReport(MultiDevStatsReport):
    """Report class to return disk load timeseries"""
    resource = 'disk_load'

#
# Single Device Reports
#


class SingleDevStatsReport(BaseStatsReport):
    required_fields = ['device']


class SDRAdaptiveStatsReport(SingleDevStatsReport):
    """Report class to return the SDR Adaptive timeseries"""
    resource = 'sdr_adaptive'


class MemoryPagingStatsReport(SingleDevStatsReport):
    """Report class to return the memory paging timeseries"""
    resource = 'memory_paging'


class CpuUtilizationStatsReport(SingleDevStatsReport):
    """Report class to return the cpu utilization timeseries"""
    resource = 'cpu_utilization'


class PFSStatsReport(SingleDevStatsReport):
    """Report class to return the pfs timeseries"""
    resource = 'pfs'


#
# Qos Reports
#


class QoSStatsReport(BaseStatsReport):
    """Report class to return the outbound/inbound qos timeseries"""
    required_fields = ['device']
    non_required_fields = ['qos_class_id', 'traffic_type']
    resource = 'qos'


#
# Snapmirror Reports
#


class SnapMirrorStatsReport(BaseStatsReport):
    """Report class to return regular/peak snapmirror timeseries"""
    required_fields = ['device']
    non_required_fields = ['filer_id', 'traffic_type']
    resource = 'snapmirror'


#
# SteelFusion Reports
#


class SteelFusionLUNIOReport(BaseStatsReport):
    """Report class to return the SteelFusion lun io timeseries"""
    required_fields = ['device']
    non_required_fields = ['traffic_type', 'lun_subclass_id']
    resource = 'granite_lun_io'


class SteelFusionInitiatorIOReport(BaseStatsReport):
    """Report class to return the SteelFusion initiator io timeseries"""
    required_fields = ['device']
    non_required_fields = ['traffic_type', 'initiator_subclass_id']
    resource = 'granite_initiator_io'


class SteelFusionNetworkIOReport(TimeseriesStatsReport):
    """Report class to return the SteelFusion network IO timeseries"""
    resource = 'granite_network_io'


class SteelFusionBlockstoreReport(SteelFusionLUNIOReport):
    """Report class to return the SteelFusion blockstore timeseries"""
    resource = 'granite_blockstore'
